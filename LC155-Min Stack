class MinStack {
    
    Stack stack;
    int min = Integer.MAX_VALUE;   // initialise min with the higest value
    public MinStack() {
      stack = new Stack();
    }
    
    public void push(int val) {    
        if(min < val){
          stack.push(val);
        }
        else{        // if min >= val then first push min as it is bigger then val and later push val as well because in minstack lowwer element should be on the top of the stack
            stack.push(min);
            min = val;
            stack.push(val);     
        }
    }


    public void pop() {   // pop twice if it is equal to min because we need to update min with previous min value.
        if((int)stack.pop() == min){
            min = (int)stack.pop();
        }
    }
    
    public int top() {
        return (int)stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
